<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">

<title>XBT and BTC price</title>

<style>
    :root {
        --red: #d05944;
    }

    html {
        background: #c5c5c5;
        min-height: 100vh;
        border: 5px solid grey;
        padding: 5px;
        box-shadow: 0px 0px 0px 5px white inset;
    }
    * {
        box-sizing: border-box;
    }
    html.increase--1 {
        border: 5px solid green;
    }
    html.increase--2 {
        border: 5px solid green;
    }
    html.decrease--1 {
        border: 5px solid var(--red);
    }
    html.decrease--2 {
        border: 5px solid var(--red);
    }
    html.increase--1:before {
        content: '';
    }
    html.increase--2:before {
        content: '';
    }
    html.decrease--1:before {
        content: '';
    }
    html.decrease--2:before {
        content: '';
    }
    body {
        margin: 0 auto;
        padding: 0;
        box-sizing: border-box;
        max-width: 680px;
        color: rgb(231, 231, 231);
        text-shadow: 1px 1px 1px #444;
        font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;
    }
    section {
        display: grid;
        grid-template-columns: 1fr 1fr;
        grid-template-rows: 80px 80px;
        grid-gap: 8px;
        margin-top: 46px;
        margin-bottom: 12px
    }
    section>*{
        padding: 20px;
        line-height: 40px;
        font-size: 120%;
    }
    section>*:nth-child(4n+1) { background: goldenrod;}
    section>*:nth-child(4n+2) { background: dodgerblue;}
    section>*:nth-child(4n+3) { background: var(--red);}
    section>*:nth-child(4n+4) { background: #009900;}

    h2 {
        margin: 0;
    }
    .last{
        font-weight: bold;
    }
    #time {
        font-size: 12px;
        color:black;
        text-shadow: none;
    }
    .change {
        font-size: 16px;
        float: right;
        padding: 0 5% 0 0;
        vertical-align:middle;
    }
    .change.increase--1 {
        color: green;
    }
    .change.increase--2 {
        color: green;
    }
    .change.decrease--1 {
        color: var(--red);
    }
    .change.decrease--2 {
        color: var(--red);
    }
    .increase--1:before{
        content: '▲';
        font-size: 20px;
    }
    .increase--2:before{
        content: '▲▲';
        font-size: 20px;
    }
    .decrease--1:before{
        content: '▼';
        font-size: 20px;
    }
    .decrease--2:before{
        content: '▼▼';
        font-size: 20px;
    }

    form{
        margin-bottom: 0.8em;
        border-bottom: 1px dotted black;
        display: grid;
        grid-template-columns: 1fr 1fr 1fr 1fr;
        grid-template-rows: 1fr;
        grid-gap: 8px;
    }
    label {
        background: rgba(0, 0, 0, 0.1);
        padding: 8px;
        grid-column: span 2;
    }
    label.success {
        grid-column: span 4;
    }
    input[type=number], button{
        background: none;
        padding: 8px;
        font-size: 14px;
        border: 2px solid green;
        color: green;
        text-align: center;
    }
    #min-target input[type=number], #min-target button {
        border: 2px solid var(--red);
        color: var(--red);
    }
    @media (max-width: 500px){
        section {
            grid-gap: 4px;
        }
        section>*:nth-child(4n+1) {
            grid-column: span 2;
        }
        section>*:nth-child(4n+2) {
            grid-column: span 2;
        }
        h2 {
            text-align: center;
        }
        #time {
            text-align: center;
        }
        form{
            grid-template-columns: 1fr 1fr;
            grid-row-gap: 2px;
        }
        label {
            font-size: 12px;
            padding: 4px;
        }
        label.success {
            grid-column: span 2;
        }
        input[type=number], button{
            padding: 4px;
            font-size: 14px;
            border: 2px solid green;
            color: green;
            text-align: center;
        }
    }
</style>    
</head>

<body>

    <section class="xbt">
        <div>
            <h2>X B T</h2>
        </div>
        <div>
            <span>Last: </span>
            <span class="last" id="xbt-last"><%- prices.xbt.last.slice(0, -3)  %></span>
            <span class="change" id="xbt-change"></span>
        </div>
        <div>
            <span>Low: </span>
            <span id="xbt-low"><%- prices.xbt.low.slice(0, -3)  %></span> 
        </div>
        <div>
            <span>High: </span>
            <span id="xbt-high"><%- prices.xbt.high.slice(0, -3)  %></span> 
        </div>
    </section>

    <form class="target-form" id="max-target-xbt" data-target='gt' data-currency="xbt">
        <label>Let me know if the price goes <strong>above</strong></label>
        <input type='number' value='<%- Math.floor(parseInt(prices.xbt.last))+200  %>' name='targetValue' />
        <button type='submit' id='subscription'>Notify me</button>
    </form>
    
    <form class="target-form" id="min-target-xbt" data-target='lt' data-currency="xbt">
        <label>Let me know if the price goes <strong>below</strong></label>
        <input type='number' value='<%- Math.floor(parseInt(prices.xbt.last))-200  %>' name='targetValue' />
        <button type='submit' id='subscription'>Notify me</button>
    </form>

    <section class="eth">
        <div>
            <h2>E T H</h2>
        </div>
        <div>
            <span>Last: </span>
            <span class="last" id="eth-last"><%- prices.eth.last.slice(0, -3)  %></span>
            <span class="change" id="eth-change"></span>
        </div>
        <div>
            <span>Low: </span>
            <span id="eth-low"><%- prices.eth.low.slice(0, -3)  %></span> 
        </div>
        <div>
            <span>High: </span>
            <span id="eth-high"><%- prices.eth.high.slice(0, -3)  %></span> 
        </div>
    </section>

    <p id="time"><%- prices.time  %></p>

    


    <script>

        const priceThreshold = {
            large: 50,
            small: 10
        }

        // Register the service worker.
        if (!(navigator.serviceWorker)) {
            console.log("Sorry, no service worker support in your browser");
        } else {
            navigator.serviceWorker.register('/sw.js')
            .then( reg => {
                console.log('service worker registered');
            });
        };

        const vapidPublicKey = 'BCWQthp74GCgHRnPB7xv7XWP7XuZ-wkt2JG7DnYfN_68iqO69-UfBVYlSiXSL9gbOWHLzslEf2-_b7LFfBZWFEc';
        const convertedVapidKey = urlBase64ToUint8Array(vapidPublicKey);

        // When subscription is clicked, check notification permission and request it if not granted.
        // Then subscribe user and POST subscription and target via fetch
        document.querySelectorAll('.target-form').forEach( form => {
            form.addEventListener('submit', function(ev){
                ev.preventDefault();

                // Determine which form we are interested in
                let operator = ev.target.dataset.target;
                // Which currency
                let currency = ev.target.dataset.currency;

                // Get user permission for push notifications.
                if(!('Notification' in window)) {
                    console.log("This browser does not support notifications");
                }
                // request permission to show notifications
                Notification.requestPermission( status => {
                    console.log("Notification permission status: " + status);
                });

                let target = this.targetValue.value;

                navigator.serviceWorker.ready.then( registration => {
                    registration.pushManager.subscribe({
                        userVisibleOnly: true,
                        applicationServerKey: convertedVapidKey
                    })
                    .then( subscription => {
                        let postbody = JSON.stringify({
                            subscription: subscription.toJSON(),
                            target,
                            operator,
                            currency
                        });

                        console.log('postbody:', postbody);

                        fetch('/subscribe', {
                            headers: {
                                'Accept': 'application/json',
                                'Content-Type': 'application/json'
                            },
                            method: 'post',
                            body: postbody
                        })
                        .then(function(res){ 
                            updateUISuccess(ev.target.id, target);
                        })
                        .catch(function(res){ console.log(res) })
                    });
                })
            })
        })

        function updateUISuccess(id, value){
            document.querySelector(`#${id}`).innerHTML = `<label class="success">Thanks, you will be notified if the price goes ${id.includes('max-target') ? 'above' : 'below'} ${value}</label>`;
        }


        function updatePrices(){

            fetch('/current').then(response => response.json())
            .then( prices => {
                
                document.querySelector('#xbt-last').innerHTML = prices.xbt.last.slice(0, -3);
                document.querySelector('#xbt-change').innerHTML = prices.xbt.change > 0 ? '+' + prices.xbt.change : prices.xbt.change;
                document.querySelector('#xbt-high').innerHTML = prices.xbt.high.slice(0, -3);
                document.querySelector('#xbt-low').innerHTML = prices.xbt.low.slice(0, -3);
                document.querySelector('#eth-last').innerHTML = prices.eth.last.slice(0, -3);
                document.querySelector('#eth-change').innerHTML = prices.eth.change > 0 ? '+' + prices.eth.change : prices.eth.change;
                document.querySelector('#eth-high').innerHTML = prices.eth.high.slice(0, -3);
                document.querySelector('#eth-low').innerHTML = prices.eth.low.slice(0, -3);
                document.querySelector('#time').innerHTML = prices.time;

                document.title = `XBT: ${prices.xbt.last.slice(0, -3)}`;

                // Work out xbt class to add from price change
                let xbtClassToAdd = '';
                if (prices.xbt.change <= -priceThreshold.large){
                    xbtClassToAdd = 'decrease--2'
                } else if (prices.xbt.change <= -priceThreshold.small){
                    xbtClassToAdd = 'decrease--1'
                } else if (prices.xbt.change >= priceThreshold.large){
                    xbtClassToAdd = 'increase--2'
                } else if (prices.xbt.change >= priceThreshold.small){
                    xbtClassToAdd = 'increase--1'
                } 
                // Add or remove classes to reflect price change
                document.querySelector('#xbt-change').classList.remove("increase--1", "increase--2", "decrease--1", "decrease--2");
                document.querySelector('html').classList.remove("increase--1", "increase--2", "decrease--1", "decrease--2");
                if (xbtClassToAdd.length>0){
                    document.querySelector('#xbt-change').classList.add(xbtClassToAdd);
                    document.querySelector('html').classList.add(xbtClassToAdd);
                }
            })
            .catch((err) => console.log(err));
                    
        }
        let inty = setInterval(updatePrices, 8000);

        // Convert and include  public vapid key
        function urlBase64ToUint8Array(base64String) {
            const padding = '='.repeat((4 - base64String.length % 4) % 4);
            const base64 = (base64String + padding)
            .replace(/\-/g, '+')
            .replace(/_/g, '/');
        
            const rawData = window.atob(base64);
            const outputArray = new Uint8Array(rawData.length);
        
            for (let i = 0; i < rawData.length; ++i) {
            outputArray[i] = rawData.charCodeAt(i);
            }
            return outputArray;
        }

    </script>

</body>
</html>
