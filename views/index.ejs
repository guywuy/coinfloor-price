<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">

<title>XBT and BTC price</title>

<style>
    html {
        background: #c5c5c5;
        min-height: 100vh;
        border: 5px solid grey;
        box-shadow: 0px 0px 0px 5px white inset;
        box-sizing: border-box;
    }
    html.increase--1 {
        border: 5px solid green;
    }
    html.increase--2 {
        border: 5px solid green;
    }
    html.decrease--1 {
        border: 5px solid red;
    }
    html.decrease--2 {
        border: 5px solid red;
    }
    html.increase--1:before {
        content: '';
    }
    html.increase--2:before {
        content: '';
    }
    html.decrease--1:before {
        content: '';
    }
    html.decrease--2:before {
        content: '';
    }
    body {
        margin: 0 auto;
        padding: 0;
        box-sizing: border-box;
        max-width: 680px;
        color: rgb(231, 231, 231);
        text-shadow: 1px 1px 1px #444;
        font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;
    }
    section {
        display: grid;
        grid-template-columns: 1fr 1fr;
        grid-template-rows: 80px 80px;
        grid-gap: 8px;
        margin: 46px 0;
    }
    @media (max-width: 500px){
        section>*:nth-child(4n+1) {
            grid-column: span 2;
        }
        section>*:nth-child(4n+2) {
            grid-column: span 2;
        }
        h2 {
            text-align: center;
        }
        #time {
            text-align: center;
        }
    }
    section>*{
        padding: 20px;
        line-height: 40px;
        font-size: 120%;
    }
    section>*:nth-child(4n+1) { background: goldenrod;}
    section>*:nth-child(4n+2) { background: dodgerblue;}
    section>*:nth-child(4n+3) { background: tomato;}
    section>*:nth-child(4n+4) { background: #009900;}

    h2 {
        margin: 0;
    }
    .last{
        font-weight: bold;
    }
    #time {
        font-size: 12px;
        color:black;
        text-shadow: none;
    }
    .change {
        font-size: 16px;
        float: right;
        padding: 0 5% 0 0;
        vertical-align:middle;
    }
    .change.increase--1 {
        color: green;
    }
    .change.increase--2 {
        color: green;
    }
    .change.decrease--1 {
        color: red;
    }
    .change.decrease--2 {
        color: red;
    }
    .increase--1:before{
        content: '▲';
        font-size: 20px;
    }
    .increase--2:before{
        content: '▲▲';
        font-size: 20px;
    }
    .decrease--1:before{
        content: '▼';
        font-size: 20px;
    }
    .decrease--2:before{
        content: '▼▼';
        font-size: 20px;
    }
</style>    
</head>

<body>

    <section class="xbt">
        <div>
            <h2>X B T</h2>
        </div>
        <div>
            <span>Last: </span>
            <span class="last" id="xbt-last"><%- prices.xbtLast.slice(0, -3)  %></span>
            <span class="change" id="xbt-change"></span>
        </div>
        <div>
            <span>Low: </span>
            <span id="xbt-low"><%- prices.xbtLow.slice(0, -3)  %></span> 
        </div>
        <div>
            <span>High: </span>
            <span id="xbt-high"><%- prices.xbtHigh.slice(0, -3)  %></span> 
        </div>
    </section>

    <section class="bch">
        <div>
            <h2>B C H</h2>
        </div>
        <div>
            <span>Last: </span>
            <span class="last" id="bch-last"><%- prices.bchLast.slice(0, -3)  %></span>
            <span class="change" id="bch-change"></span>
        </div>
        <div>
            <span>Low: </span>
            <span id="bch-low"><%- prices.bchLow.slice(0, -3)  %></span> 
        </div>
        <div>
            <span>High: </span>
            <span id="bch-high"><%- prices.bchHigh.slice(0, -3)  %></span> 
        </div>
    </section>
    <p id="time"><%- prices.time  %></p>

    <form class="target-form" id="max-target">
        <label>Let me know if the price goes above</label>
        <input type='number' value='<%- Math.floor(parseInt(prices.xbtLast))+200  %>' name='targetValue' />
        <button type='submit' id='subscription'>Notify me</button>
    </form>
    
    <form class="target-form" id="min-target">
        <label>Let me know if the price goes below</label>
        <input type='number' value='5' name='targetValue' />
        <button type='submit' id='subscription'>Notify me</button>
    </form>


    <script>

        // Register the service worker.
        if (!(navigator.serviceWorker)) {
            console.log("Sorry, no service worker support in your browser");
        } else {
            navigator.serviceWorker.register('/sw.js')
            .then( reg => {
                console.log('service worker registered');
            });
        };

        const vapidPublicKey = 'BCWQthp74GCgHRnPB7xv7XWP7XuZ-wkt2JG7DnYfN_68iqO69-UfBVYlSiXSL9gbOWHLzslEf2-_b7LFfBZWFEc';
        const convertedVapidKey = urlBase64ToUint8Array(vapidPublicKey);

        // When subscription is clicked, check notification permission and request it if not granted.
        // Then subscribe user and POST subscription and target via fetch
        document.querySelectorAll('.target-form').forEach( form => {
            form.addEventListener('submit', function(ev){
                ev.preventDefault();

                // Determine which form we are interested in
                let operator = ev.target.id == 'max-target' ? 'gt' : 'lt';

                // Get user permission for push notifications.
                if(!('Notification' in window)) {
                    console.log("This browser does not support notifications");
                }
                // request permission to show notifications
                Notification.requestPermission( status => {
                    console.log("Notification permission status: " + status);
                });

                let target = this.targetValue.value;

                navigator.serviceWorker.ready.then( registration => {
                    registration.pushManager.subscribe({
                        userVisibleOnly: true,
                        applicationServerKey: convertedVapidKey
                    })
                    .then( subscription => {
                        let postbody = JSON.stringify({
                            subscription: subscription.toJSON(),
                            target,
                            operator: operator
                        });
                        fetch('/subscribe', {
                            headers: {
                                'Accept': 'application/json',
                                'Content-Type': 'application/json'
                            },
                            method: 'post',
                            body: postbody
                        })
                        .then(function(res){ 
                            console.log(ev.target.id)
                            updateUISuccess(ev.target.id, target);
                            console.log(res);
                        })
                        .catch(function(res){ console.log(res) })
                    });
                })
            })
        })

        function updateUISuccess(id, value){
            document.querySelector(`#${id}`).innerHTML = `Thanks, you will be notified if the price goes ${id=='max-target' ? 'above' : 'below'} ${value}`;
        }


        function updatePrices(){

            fetch('/current').then(response => response.json())
            .then( prices => {

                console.log(prices);
                
                document.querySelector('#xbt-last').innerHTML = prices.xbtLast.slice(0, -3);
                document.querySelector('#xbt-change').innerHTML = prices.xbtChange > 0 ? '+' + prices.xbtChange : prices.xbtChange;
                document.querySelector('#xbt-high').innerHTML = prices.xbtHigh.slice(0, -3);
                document.querySelector('#xbt-low').innerHTML = prices.xbtLow.slice(0, -3);
                document.querySelector('#bch-last').innerHTML = prices.bchLast.slice(0, -3);
                document.querySelector('#bch-change').innerHTML = prices.bchChange > 0 ? '+' + prices.bchChange : prices.bchChange;
                document.querySelector('#bch-high').innerHTML = prices.bchHigh.slice(0, -3);
                document.querySelector('#bch-low').innerHTML = prices.bchLow.slice(0, -3);
                document.querySelector('#time').innerHTML = prices.time;

                // Work out xbt class to add from price change
                let xbtClassToAdd = '';
                if (prices.xbtChange <= -40){
                    xbtClassToAdd = 'decrease--2'
                } else if (prices.xbtChange <= -10){
                    xbtClassToAdd = 'decrease--1'
                } else if (prices.xbtChange >= 40){
                    xbtClassToAdd = 'increase--2'
                } else if (prices.xbtChange >= 10){
                    xbtClassToAdd = 'increase--1'
                } 
                // Add or remove classes to reflect price change
                document.querySelector('#xbt-change').classList.remove("increase--1", "increase--2", "decrease--1", "decrease--2");
                document.querySelector('#xbt-change').classList.add(xbtClassToAdd);
                
                // Also add / remove class from html
                document.querySelector('html').classList.remove("increase--1", "increase--2", "decrease--1", "decrease--2");
                document.querySelector('html').classList.add(xbtClassToAdd);
                

                // Work out bch class to add from price change
                let bchClassToAdd = '';
                if (prices.bchChange <= -40){
                    bchClassToAdd = 'decrease--2'
                } else if (prices.bchChange <= -10){
                    bchClassToAdd = 'decrease--1'
                } else if (prices.bchChange >= 40){
                    bchClassToAdd = 'increase--2'
                } else if (prices.bchChange >= 10){
                    bchClassToAdd = 'increase--1'
                } 
                // Add or remove classes to reflect price change
                document.querySelector('#bch-change').classList.remove("increase--1", "increase--2", "decrease--1", "decrease--2");
                document.querySelector('#bch-change').classList.add(bchClassToAdd);
            })
            .catch(() => console.log("Oops! Can't get current prices"));
                    
        }
        let inty = setInterval(updatePrices, 8000);





        // Convert and include  public vapid key
        function urlBase64ToUint8Array(base64String) {
            const padding = '='.repeat((4 - base64String.length % 4) % 4);
            const base64 = (base64String + padding)
            .replace(/\-/g, '+')
            .replace(/_/g, '/');
        
            const rawData = window.atob(base64);
            const outputArray = new Uint8Array(rawData.length);
        
            for (let i = 0; i < rawData.length; ++i) {
            outputArray[i] = rawData.charCodeAt(i);
            }
            return outputArray;
        }

    </script>

</body>
</html>
